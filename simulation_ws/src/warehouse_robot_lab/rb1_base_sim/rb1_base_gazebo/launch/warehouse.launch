<?xml version="1.0"?>
<launch>
    <arg name="limited" default="false" doc="If true, limits joint range [-PI, PI] on all joints." />
    <arg name="launch_gripper" default="true"/>

	<!-- arg to config the launch file-->
	<arg name="launch_rviz" default="false"/>
	<arg name="rviz_config" default="$(find rb1_base_gazebo)/rviz/rb1_base.rviz"/>
	<arg name="launch_robot_a" default="true"/>
	<arg name="gazebo_world" default="$(find rb1_base_gazebo)/worlds/ros2_online_workshop.world"/>
	<!-- <arg name="gazebo_world" default="$(find rb1_base_gazebo)/worlds/empty_world.world"/> -->

	<arg name="debug" default="false"/>

	<!--params of the different robots-->
	<!-- robot a -->
	<arg name="id_robot_a" default="robot"/>
	<arg name="xacro_robot_a" default="rb1_base.urdf.xacro"/>
	<arg name="has_elevator_robot_a" default="false"/>
	<arg name="x_init_pose_robot_a" default="0.0" />
	<arg name="y_init_pose_robot_a" default="0.0" />
	<arg name="z_init_pose_robot_a" default="0.0" />
	<arg name="init_yaw_robot_a" default="0.0" />
	<arg name="gmapping_robot_a" default="false"/>
	<arg name="amcl_and_mapserver_robot_a" default="false"/>
	<arg name="map_frame_robot_a" default="$(arg id_robot_a)_map"/>
	<arg name="move_base_robot_a" default="false"/>
	<arg name="pad_robot_a" default="false"/>


    <!-- send robot urdf to param server -->
    <include file="$(find ur_e_description)/launch/ur3e_upload.launch">
        <arg name="limited" value="$(arg limited)"/>
    </include>

    <!-- push robot_description to factory and spawn robot in gazebo -->
    <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -unpause -param robot_description -model ur3e -x 5.3 -y -3.5 -z 0.92 -R 0.0 -P 0.0 -Y -1.57 -J shoulder_lift_joint -1.57 -J wrist_1_joint -1.57" respawn="false" output="screen" />

	<!--BEGIN ROBOT 1-->
	<include if="$(arg launch_robot_a)" file="$(find rb1_base_gazebo)/launch/rb1_base_one_robot.launch">
		<arg name="id_robot" value="$(arg id_robot_a)"/>
		<arg name="xacro_robot" value="$(arg xacro_robot_a)"/>
		<arg name="has_elevator" value="$(arg has_elevator_robot_a)"/>
		<arg name="x_init_pose" value="$(arg x_init_pose_robot_a)"/>
		<arg name="y_init_pose" value="$(arg y_init_pose_robot_a)"/>
		<arg name="z_init_pose" value="$(arg z_init_pose_robot_a)"/>
		<arg name="init_yaw" value="$(arg init_yaw_robot_a)"/>
		<arg name="launch_gmapping" value="$(arg gmapping_robot_a)"/>
		<arg name="global_frame" value="$(arg map_frame_robot_a)"/>
		<arg name="launch_pad" value="$(arg pad_robot_a)"/>
	</include>


	<!-- gazebo simulation and rviz visualization-->
	<include file="$(find rb1_base_gazebo)/launch/gazebo_rviz.launch">
		<arg name="launch_rviz" value="$(arg launch_rviz)"/>
		<arg name="world_name" value="$(arg gazebo_world)"/>
		<arg name="debug" value="$(arg debug)"/>
		<arg name="rviz_config" value="$(arg rviz_config)"/>
	</include>

    <!-- <remap from="/wrist_rgbd/depth/points" to="/camera/depth/color/points"/>
    <remap from="/wrist_rgbd/rgb/image_raw" to="/camera/color/image_raw"/>
    <remap from="/wrist_rgbd/depth/camera_info" to="/camera/depth/camera_info"/>
    <remap from="/wrist_rgbd/depth/image_raw" to="/camera/depth/image_rect_raw"/>
 -->

    <include file="$(find ur_e_gazebo)/launch/controller_utils.launch"/>

    <!-- start this controller -->
    <rosparam file="$(find ur_e_gazebo)/controller/arm_controller_ur3e.yaml" command="load"/>
    <node name="arm_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn scaled_pos_joint_traj_controller" respawn="false" output="screen"/>

    <group if="$(arg launch_gripper)">
        <!-- <rosparam file="$(find egh_gripper_description_new)/config/gripper_control.yaml" command="load"/> -->
        <rosparam file="$(find rg2_gripper_description)/config/gripper_control.yaml" command="load"/>

        <!-- <param name="gripper_controller/joint" value="egh_gripper_finger_left_joint"/> -->
        <param name="gripper_controller/joint" value="rg2_gripper_finger_left_joint"/>


        <node name="controller_spawner_gripper" pkg="controller_manager" type="spawner" respawn="false"
        output="screen" args="gripper_controller"/>
    </group>

    <!-- load other controllers -->
    <node name="ros_control_controller_manager" pkg="controller_manager" type="controller_manager" respawn="false" output="screen" args="load joint_group_position_controller" />

    <!-- static transfrom from base_link to table -->
    <node pkg="tf" type="static_transform_publisher" name="arm2table_broadcaster" args="0 0 0 0 0 0 base_link table 100" />

    <!-- static transfrom from base_link to wall -->
    <node pkg="tf" type="static_transform_publisher" name="arm2wall_broadcaster" args="0 0 0 0 0 0 base_link wall 100" />

    	<!-- Launch fake elevator action server to mimic real robot -->
	<node pkg="robotnik_base_hw_sim" type="elevator_fake_action_server.py" name="set_elevator" ns="robot/robotnik_base_control" output="screen"/>

	<!-- Launch fake elevator pickup service server that is called by action server above -->
	<include file="$(find robotnik_base_hw_sim)/launch/elevator_fake_pickup_gazebo.launch"></include>

    <!-- Launch node that subscribes to empty topic so elevator can be set up/down from ros2 -->
    <node pkg="robotnik_base_hw_sim" type="ros2_fake_elevator.py" name="set_elevator_ros2" output="screen"/>



</launch>
